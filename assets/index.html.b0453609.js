import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{g as i,c as s,a as e,h as t,w as r,F as l,d as o,b as d,o as c}from"./app.b41e3990.js";const h={},f=o('<h1 id="module-index" tabindex="-1"><a class="header-anchor" href="#module-index" aria-hidden="true">#</a> Module: index</h1><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h3>',3),u=d("DepParser"),p=d("FormulaError"),m=d("FormulaParser"),x=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),d(" Properties")],-1),y=d("SSF"),_=e("h3",{id:"variables",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#variables","aria-hidden":"true"},"#"),d(" Variables")],-1),b=d("Address"),g=d("Criteria"),C=d("Factorials"),T=d("FormulaHelpers"),F=d("MAX_COLUMN"),N=d("MAX_ROW"),v=d("ReversedTypes"),R=d("Types"),D=d("WildCard"),M=o('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="ssf" tabindex="-1"><a class="header-anchor" href="#ssf" aria-hidden="true">#</a> SSF</h3><p>\u2022 <strong>SSF</strong>: <code>any</code></p><h2 id="variables-1" tabindex="-1"><a class="header-anchor" href="#variables-1" aria-hidden="true">#</a> Variables</h2><h3 id="address" tabindex="-1"><a class="header-anchor" href="#address" aria-hidden="true">#</a> Address</h3><p>\u2022 <code>Const</code> <strong>Address</strong>: <code>Object</code></p><h4 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>columnNameToNumber</code></td><td style="text-align:left;">(<code>columnName</code>: <code>any</code>) =&gt; <code>number</code></td></tr><tr><td style="text-align:left;"><code>columnNumberToName</code></td><td style="text-align:left;">(<code>number</code>: <code>any</code>) =&gt; <code>string</code></td></tr><tr><td style="text-align:left;"><code>extend</code></td><td style="text-align:left;">(<code>range1</code>: <code>any</code>, <code>range2</code>: <code>any</code>) =&gt; <code>any</code></td></tr><tr><td style="text-align:left;"><code>isCellRef</code></td><td style="text-align:left;">(<code>param</code>: <code>any</code>) =&gt; <code>any</code></td></tr><tr><td style="text-align:left;"><code>isRangeRef</code></td><td style="text-align:left;">(<code>param</code>: <code>any</code>) =&gt; <code>any</code></td></tr></tbody></table><h4 id="defined-in" tabindex="-1"><a class="header-anchor" href="#defined-in" aria-hidden="true">#</a> Defined in</h4><p>src/formula/formulas/helpers.ts:103</p><hr><h3 id="criteria" tabindex="-1"><a class="header-anchor" href="#criteria" aria-hidden="true">#</a> Criteria</h3><p>\u2022 <code>Const</code> <strong>Criteria</strong>: <code>Object</code></p><h4 id="type-declaration-1" tabindex="-1"><a class="header-anchor" href="#type-declaration-1" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>parse</code></td><td style="text-align:left;">(<code>criteria</code>: <code>any</code>) =&gt; { <code>match</code>: <code>boolean</code> ; <code>op</code>: <code>string</code> = &#39;wc&#39;; <code>value</code>: <code>RegExp</code> } | { <code>match</code>: <code>undefined</code> ; <code>op</code>: <code>any</code> ; <code>value</code>: <code>any</code> }</td></tr></tbody></table><h4 id="defined-in-1" tabindex="-1"><a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a> Defined in</h4><p>src/formula/formulas/helpers.ts:488</p><hr><h3 id="factorials" tabindex="-1"><a class="header-anchor" href="#factorials" aria-hidden="true">#</a> Factorials</h3><p>\u2022 <code>Const</code> <strong>Factorials</strong>: <code>number</code>[]</p><h4 id="defined-in-2" tabindex="-1"><a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a> Defined in</h4><p>src/formula/formulas/helpers.ts:19</p><hr><h3 id="formulahelpers" tabindex="-1"><a class="header-anchor" href="#formulahelpers" aria-hidden="true">#</a> FormulaHelpers</h3><p>\u2022 <code>Const</code> <strong>FormulaHelpers</strong>: <code>FormulaHelpers</code></p><h4 id="defined-in-3" tabindex="-1"><a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a> Defined in</h4><p>src/formula/formulas/helpers.ts:465</p><hr><h3 id="max-column" tabindex="-1"><a class="header-anchor" href="#max-column" aria-hidden="true">#</a> MAX_COLUMN</h3><p>\u2022 <code>Const</code> <strong>MAX_COLUMN</strong>: <code>16384</code></p><h4 id="defined-in-4" tabindex="-1"><a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a> Defined in</h4><p>src/formula/index.ts:17</p><hr><h3 id="max-row" tabindex="-1"><a class="header-anchor" href="#max-row" aria-hidden="true">#</a> MAX_ROW</h3><p>\u2022 <code>Const</code> <strong>MAX_ROW</strong>: <code>1048576</code></p><h4 id="defined-in-5" tabindex="-1"><a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a> Defined in</h4><p>src/formula/index.ts:16</p><hr><h3 id="reversedtypes" tabindex="-1"><a class="header-anchor" href="#reversedtypes" aria-hidden="true">#</a> ReversedTypes</h3><p>\u2022 <code>Const</code> <strong>ReversedTypes</strong>: <code>any</code> = <code>{}</code></p><h4 id="defined-in-6" tabindex="-1"><a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a> Defined in</h4><p>src/formula/formulas/helpers.ts:98</p><hr><h3 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> Types</h3><p>\u2022 <code>Const</code> <strong>Types</strong>: <code>NumberDic</code></p><h4 id="defined-in-7" tabindex="-1"><a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a> Defined in</h4><p>src/formula/formulas/helpers.ts:8</p><hr><h3 id="wildcard" tabindex="-1"><a class="header-anchor" href="#wildcard" aria-hidden="true">#</a> WildCard</h3><p>\u2022 <code>Const</code> <strong>WildCard</strong>: <code>Object</code></p><h4 id="type-declaration-2" tabindex="-1"><a class="header-anchor" href="#type-declaration-2" aria-hidden="true">#</a> Type declaration</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>isWildCard</code></td><td style="text-align:left;">(<code>obj</code>: <code>any</code>) =&gt; <code>boolean</code></td></tr><tr><td style="text-align:left;"><code>toRegex</code></td><td style="text-align:left;">(<code>lookupText</code>: <code>any</code>, <code>flags?</code>: <code>any</code>) =&gt; <code>RegExp</code></td></tr></tbody></table><h4 id="defined-in-8" tabindex="-1"><a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a> Defined in</h4><p>src/formula/formulas/helpers.ts:467</p>',54);function w(A,O){const a=i("RouterLink");return c(),s(l,null,[f,e("ul",null,[e("li",null,[t(a,{to:"/formula/classes/index.DepParser.html"},{default:r(()=>[u]),_:1})]),e("li",null,[t(a,{to:"/formula/classes/index.FormulaError.html"},{default:r(()=>[p]),_:1})]),e("li",null,[t(a,{to:"/formula/classes/index.FormulaParser.html"},{default:r(()=>[m]),_:1})])]),x,e("ul",null,[e("li",null,[t(a,{to:"/formula/modules/#ssf"},{default:r(()=>[y]),_:1})])]),_,e("ul",null,[e("li",null,[t(a,{to:"/formula/modules/#address"},{default:r(()=>[b]),_:1})]),e("li",null,[t(a,{to:"/formula/modules/#criteria"},{default:r(()=>[g]),_:1})]),e("li",null,[t(a,{to:"/formula/modules/#factorials"},{default:r(()=>[C]),_:1})]),e("li",null,[t(a,{to:"/formula/modules/#formulahelpers"},{default:r(()=>[T]),_:1})]),e("li",null,[t(a,{to:"/formula/modules/#max_column"},{default:r(()=>[F]),_:1})]),e("li",null,[t(a,{to:"/formula/modules/#max_row"},{default:r(()=>[N]),_:1})]),e("li",null,[t(a,{to:"/formula/modules/#reversedtypes"},{default:r(()=>[v]),_:1})]),e("li",null,[t(a,{to:"/formula/modules/#types"},{default:r(()=>[R]),_:1})]),e("li",null,[t(a,{to:"/formula/modules/#wildcard"},{default:r(()=>[D]),_:1})])]),M],64)}var P=n(h,[["render",w],["__file","index.html.vue"]]);export{P as default};
