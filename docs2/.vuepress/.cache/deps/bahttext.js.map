{
  "version": 3,
  "sources": ["../../../../node_modules/bahttext/src/index.js", "dep:bahttext"],
  "sourcesContent": ["const defaultResult = '\u0E28\u0E39\u0E19\u0E22\u0E4C\u0E1A\u0E32\u0E17\u0E16\u0E49\u0E27\u0E19'\nconst singleUnitStrs = ['', '\u0E2B\u0E19\u0E36\u0E48\u0E07', '\u0E2A\u0E2D\u0E07', '\u0E2A\u0E32\u0E21', '\u0E2A\u0E35\u0E48', '\u0E2B\u0E49\u0E32', '\u0E2B\u0E01', '\u0E40\u0E08\u0E47\u0E14', '\u0E41\u0E1B\u0E14', '\u0E40\u0E01\u0E49\u0E32']\nconst placeNameStrs = ['', '\u0E2A\u0E34\u0E1A', '\u0E23\u0E49\u0E2D\u0E22', '\u0E1E\u0E31\u0E19', '\u0E2B\u0E21\u0E37\u0E48\u0E19', '\u0E41\u0E2A\u0E19', '\u0E25\u0E49\u0E32\u0E19']\n\n/**\n * @param {number[]} nums\n * @returns {string}\n */\nfunction num2Word (nums) {\n  let result = ''\n  const len = nums.length\n  const maxLen = 7\n\n  if (len > maxLen) {\n    // more than million\n    const overflowIndex = len - maxLen + 1\n    const overflowNums = nums.slice(0, overflowIndex)\n    const remainingNumbs = nums.slice(overflowIndex)\n    return num2Word(overflowNums) + '\u0E25\u0E49\u0E32\u0E19' + num2Word(remainingNumbs)\n  } else {\n    for (let i = 0; i < len; i++) {\n      const digit = nums[i]\n      if (digit > 0) {\n        result += singleUnitStrs[digit] + placeNameStrs[len - i - 1]\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @todo improve performance\n * @param {string} str\n * @returns {string}\n */\nfunction grammarFix (str) {\n  let result = str\n\n  result = result.replace(/\u0E2B\u0E19\u0E36\u0E48\u0E07\u0E2A\u0E34\u0E1A/g, '\u0E2A\u0E34\u0E1A')\n  result = result.replace(/\u0E2A\u0E2D\u0E07\u0E2A\u0E34\u0E1A/g, '\u0E22\u0E35\u0E48\u0E2A\u0E34\u0E1A')\n  result = result.replace(/\u0E2A\u0E34\u0E1A\u0E2B\u0E19\u0E36\u0E48\u0E07/g, '\u0E2A\u0E34\u0E1A\u0E40\u0E2D\u0E47\u0E14')\n\n  return result\n}\n\n/**\n * Combine baht and satang\n * and also adding unit\n *\n * @param {string} baht\n * @param {string} satang\n * @returns {string}\n */\nfunction combine (baht, satang) {\n  let result = ''\n\n  if (baht === '' && satang === '') {\n    result = defaultResult\n  } else if (baht !== '' && satang === '') {\n    result = baht + '\u0E1A\u0E32\u0E17' + '\u0E16\u0E49\u0E27\u0E19'\n  } else if (baht === '' && satang !== '') {\n    result = satang + '\u0E2A\u0E15\u0E32\u0E07\u0E04\u0E4C'\n  } else {\n    result = baht + '\u0E1A\u0E32\u0E17' + satang + '\u0E2A\u0E15\u0E32\u0E07\u0E04\u0E4C'\n  }\n\n  return result\n}\n\n/**\n * Change number to Thai pronunciation string\n *\n * @param {number} num\n * @returns {string}\n */\nfunction bahttext (num) {\n  // no null\n  if (!num) return defaultResult\n  // no boolean\n  if (typeof num === 'boolean') return defaultResult\n  // must be number only\n  if (isNaN(Number(num))) return defaultResult\n  // not less than Number.MIN_SAFE_INTEGER\n  if (num < Number.MIN_SAFE_INTEGER) return defaultResult\n  // no more than Number.MAX_SAFE_INTEGER\n  if (num > Number.MAX_SAFE_INTEGER) return defaultResult\n\n  // set\n  const positiveNum = Math.abs(num)\n\n  // split baht and satang e.g. 432.214567 >> 432, 21\n  const bahtStr = Math.floor(positiveNum).toString()\n  /** @type {string} */\n  const satangStr = (positiveNum % 1 * 100).toFixed(2).split('.')[0]\n\n  /** @type {number[]} */\n  const bahtArr = Array.from(bahtStr).map(Number)\n  /** @type {number[]} */\n  const satangArr = Array.from(satangStr).map(Number)\n\n  // proceed\n  let baht = num2Word(bahtArr)\n  let satang = num2Word(satangArr)\n\n  // grammar\n  baht = grammarFix(baht)\n  satang = grammarFix(satang)\n\n  // combine\n  const result = combine(baht, satang)\n\n  return num >= 0 ? result : '\u0E25\u0E1A' + result\n}\n\nif (typeof module !== 'undefined' &&\n  module.exports != null) {\n  module.exports = {\n    bahttext\n  }\n  exports.default = {\n    bahttext\n  }\n}\n", "export default require(\"../../../../node_modules/bahttext/src/index.js\");"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAM,gBAAgB;AACtB,QAAM,iBAAiB,CAAC,IAAI,kCAAS,sBAAO,sBAAO,sBAAO,sBAAO,gBAAM,4BAAQ,sBAAO,0BAAM;AAC5F,QAAM,gBAAgB,CAAC,IAAI,sBAAO,4BAAQ,sBAAO,kCAAS,sBAAO,0BAAM;AAMvE,sBAAmB,MAAM;AACvB,UAAI,SAAS;AACb,YAAM,MAAM,KAAK;AACjB,YAAM,SAAS;AAEf,UAAI,MAAM,QAAQ;AAEhB,cAAM,gBAAgB,MAAM,SAAS;AACrC,cAAM,eAAe,KAAK,MAAM,GAAG,aAAa;AAChD,cAAM,iBAAiB,KAAK,MAAM,aAAa;AAC/C,eAAO,SAAS,YAAY,IAAI,6BAAS,SAAS,cAAc;AAAA,MAClE,OAAO;AACL,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,gBAAM,QAAQ,KAAK;AACnB,cAAI,QAAQ,GAAG;AACb,sBAAU,eAAe,SAAS,cAAc,MAAM,IAAI;AAAA,UAC5D;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAOA,wBAAqB,KAAK;AACxB,UAAI,SAAS;AAEb,eAAS,OAAO,QAAQ,aAAa,oBAAK;AAC1C,eAAS,OAAO,QAAQ,WAAW,sCAAQ;AAC3C,eAAS,OAAO,QAAQ,aAAa,4CAAS;AAE9C,aAAO;AAAA,IACT;AAUA,qBAAkB,MAAM,QAAQ;AAC9B,UAAI,SAAS;AAEb,UAAI,SAAS,MAAM,WAAW,IAAI;AAChC,iBAAS;AAAA,MACX,WAAW,SAAS,MAAM,WAAW,IAAI;AACvC,iBAAS,OAAO;AAAA,MAClB,WAAW,SAAS,MAAM,WAAW,IAAI;AACvC,iBAAS,SAAS;AAAA,MACpB,OAAO;AACL,iBAAS,OAAO,uBAAQ,SAAS;AAAA,MACnC;AAEA,aAAO;AAAA,IACT;AAQA,sBAAmB,KAAK;AAEtB,UAAI,CAAC;AAAK,eAAO;AAEjB,UAAI,OAAO,QAAQ;AAAW,eAAO;AAErC,UAAI,MAAM,OAAO,GAAG,CAAC;AAAG,eAAO;AAE/B,UAAI,MAAM,OAAO;AAAkB,eAAO;AAE1C,UAAI,MAAM,OAAO;AAAkB,eAAO;AAG1C,YAAM,cAAc,KAAK,IAAI,GAAG;AAGhC,YAAM,UAAU,KAAK,MAAM,WAAW,EAAE,SAAS;AAEjD,YAAM,YAAa,eAAc,IAAI,KAAK,QAAQ,CAAC,EAAE,MAAM,GAAG,EAAE;AAGhE,YAAM,UAAU,MAAM,KAAK,OAAO,EAAE,IAAI,MAAM;AAE9C,YAAM,YAAY,MAAM,KAAK,SAAS,EAAE,IAAI,MAAM;AAGlD,UAAI,OAAO,SAAS,OAAO;AAC3B,UAAI,SAAS,SAAS,SAAS;AAG/B,aAAO,WAAW,IAAI;AACtB,eAAS,WAAW,MAAM;AAG1B,YAAM,SAAS,QAAQ,MAAM,MAAM;AAEnC,aAAO,OAAO,IAAI,SAAS,iBAAO;AAAA,IACpC;AAEA,QAAI,OAAO,WAAW,eACpB,OAAO,WAAW,MAAM;AACxB,aAAO,UAAU;AAAA,QACf;AAAA,MACF;AACA,cAAQ,UAAU;AAAA,QAChB;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AC3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAO,mBAAQ;",
  "names": []
}
